<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Now Playing</title>
  <style>
    body { 
      min-height: 100vh;
      display: flex;
      align-items: center;
      flex-direction: column;
      justify-content: center;
      text-align: center; 
      font-family: Arial, sans-serif; 
      color: #fff; 
      background-color:#000; 
    }
    .cover-art { 
      max-width: 800px; 
      margin: 20px auto; 
    }
    .status { 
      font-size: 1.2em; 
      color:#199dc9;
      padding: 20px; 
    }
    #sound-waves {
      display:block;
      flex: 1;
      width: 100vw;
      position: absolute;
      bottom:0;
    }
    main {
      background-color: #199dc9;
      flex: 1;
      width: 100vw;
      position: relative;
      overflow: hidden;

      -webkit-transition: background-color 1000ms linear;
      -ms-transition: background-color 1000ms linear;
      transition: background-color 1000ms linear;
    }
    footer {
      background-color: #fff;
      color: #000;
      flex: 1;
      width: 100vw;

      -webkit-transition: color 1000ms linear;
      -ms-transition: color 1000ms linear;
      transition: color 1000ms linear;
    }

    #toggleButton {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 70px;
      height: 70px;
      border: 2px solid white;
      border-radius: 50%;
      background-color: green; /* default state */
      color: white;
      font-size: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      outline: none;
      cursor: pointer;
    }

    #toggleButton:active {
      transform: scale(0.95);
    }
  
    .wave {
      background-image: url("/images/wave--infinite.svg");
      background-size: 50% 100%;
      bottom: -5%;
      left: 0;
      position: absolute;
      right: 0;
    }
    .wave:nth-of-type(1) {
      animation: wave calc(20.8 * 1s) infinite linear;
      height: calc(17 * 1vh);
      width: calc(600 * 1vw);
      opacity: 0.3;
    }
    .wave:nth-of-type(2) {
      animation: wave calc(30.4 * 1s) infinite linear;
      height: calc(15 * 1vh);
      width: calc(800 * 1vw);
      opacity: 0.6;
    }
    .wave:nth-of-type(3) {
      animation: wave calc(45.7 * 1s) infinite linear;
      height: calc(5 * 1vh);
      width: calc(400 * 1vw);
      opacity: 1;
    }

    @keyframes wave {
      to {
        transform: translate(-50%, 0);
      }
    }
  </style>
</head>
<body>
  <main>
    <div class="track-info">
      <h1 id="track-title">No Track Detected</h1>
      <h2 id="track-subtitle"></h2>
      <img id="cover-art" class="cover-art" src="/images/default-placeholder.svg" alt="Default Cover Art">
    </div>
    
    <div id="sound-waves">
      <div class="wave"></div>
      <div class="wave"></div>
      <div class="wave"></div>
    </div>
  </main>

  <footer>
    <div class="status">
      <p id="status-text">Listening...</p>
    </div>
    <button id="toggleButton" onclick="togglePause()" title="Pause/Resume Service">
      <i id="toggleIcon" class="icon fas fa-play"></i>
    </button>
  </footer>

  <script>
    /* Function to poll the /status endpoint and update the page
    Statuses returned
      idle:
        The system is listening but no significant audio (or song) has been detected.
      recording:
        The system has detected voice activity and is actively recording an audio clip.
      matched:
        A song has been successfully recognized (i.e. the API returned a match) and the track data is now being displayed.
      retry_wait:
        No match was found for the recorded audio, and the system is waiting a short period before trying again.
      paused:
        User paused the service.
    */
    function updateStatus() {
      fetch('/status')
        .then(response => response.json())
        .then(data => {
          var status = document.getElementById('status-text');
          var main = document.querySelector('main');
          var footer = document.querySelector('footer');
          var waves = document.getElementById('sound-waves');
          switch(data.status) {
            case 'recording':
              main.style.backgroundColor = '#c91983';
              status.style.color = '#c91983';
              status.innerText = 'Recording';
            break;
            case 'matched':
              main.style.backgroundColor = '#000000';
              status.innerText = "";
            break;
            case 'idle':
            case 'retry_wait':
              main.style.backgroundColor = '#199dc9';
              status.style.color = '#199dc9';
              status.innerText = "Listening...";
            break;
            case 'paused':
              main.style.backgroundColor = '#199dc9';
              status.style.color = '#199dc9';
              status.innerText = "Paused";
            break;
          }
          if (data.status !== 'matched') {
            waves.style.display = 'block';
            footer.style.backgroundColor = '#ffffff';
          } else {
            waves.style.display = 'none';
            footer.style.backgroundColor = '#000000';
          }
          if (data.track && data.track.title) {
            document.getElementById('track-title').innerText = data.track.title;
            document.getElementById('track-subtitle').innerText = 'by ' + data.track.subtitle;
            // modify the url for a larger version of the artwork
            let artworkSrc = data.track.images.coverart;
            let newSize = artworkSrc.replaceAll('400', '800');
            document.getElementById('cover-art').src = newSize;
          } else {
            if (data.status !== 'paused') {
              document.getElementById('track-title').innerText = 'Service Paused';
            } else {
              document.getElementById('track-title').innerText = 'No Track Detected';
            }
            document.getElementById('track-subtitle').innerText = '';
            document.getElementById('cover-art').src = '/images/default-placeholder.svg';
          }
        })
        .catch(err => console.error('Error fetching status:', err));
    }

    // Poll every 5 seconds
    setInterval(updateStatus, 5000);
    // Initial update
    updateStatus();

    // Initial state;
    let paused = false;

    async function togglePause() {
      try {
        const response = await fetch('/togglePause', { method: 'POST' });
        const data = await response.json();
        paused = (data.status === 'paused');
        updateToggleButton();
      } catch (err) {
        console.error('Error toggling pause:', err);
      }
    }

    function updateToggleButton() {
      const btn = document.getElementById('toggleButton');
      const icon = document.getElementById('toggleIcon');
      if (paused) {
        // When paused: orange button with pause icon (white)
        btn.style.backgroundColor = 'orange';
        icon.className = 'icon fas fa-pause';  // using Font Awesome classes
      } else {
        // When not paused: green button with play icon (white)
        btn.style.backgroundColor = 'green';
        icon.className = 'icon fas fa-play';
      }
    }

    // Initialize on load
    updateToggleButton();
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/js/fontawesome.min.js" crossorigin="anonymous"></script>
</body>
</html>
